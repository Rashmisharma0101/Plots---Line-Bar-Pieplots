#plotting graphs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
a= pd.read_csv(r'C:\Users\acer\Desktop\Data set\iris.csv', 
           names = ['sepal length', 'sepal width', 'petal length', 'petal width', 'class'])

a

#straight line graph
x=np.arange(1,20)
y1=2*x
y2=3*x
plt.plot(x,y1, color = 'red', linestyle = ':', linewidth =2)
plt.plot(x,y2, color = 'green', linestyle = '--', linewidth =4)
plt.title('Straight Line graph')
plt.xlabel('x-axis')
plt.ylabel('y-axis')
plt.grid()
plt.show()

# line graph from reading excel file (iris), manually sorted all te columns
import matplotlib.pyplot as plt
# %matplotlib inline, it sometime helps plotting graph, if it is not coming properly
b= pd.read_csv(r'C:\Users\acer\Desktop\Data set\irissorted.csv', 
           names = ['sepal length', 'sepal width', 'petal length', 'petal width', 'class'])
plt.plot(b['sepal length'], b['sepal width'], linestyle = '-', linewidth = 1, color = 'green')
plt.plot(b['petal length'], b['petal width'], linestyle = ':', linewidth = 2, color = 'red')
plt.xlabel('sepal/petal length')
plt.ylabel('sepal/petal width')
plt.title('Line graph')
plt.legend(['Sepal', 'Petal'])
# or to change legend place, need to put handles with the loc command, writing them separately wont work
# plt.legend(['Petal', 'Sepal'], loc = 'upper right')
# plt.show();   this can also be written, can put ';', it sometime helps plotting graph, if it is not coming properly
plt.xkcd() #to plot hand-drawn plots
plt.show()

# line graph from reading excel file (iris), sorted in code, not coming properly
a.sort_values(by=['sepal length'], inplace = True)
a.sort_values(by=['sepal width'], inplace = True)
plt.plot(a['sepal length'], a['sepal width'])
plt.xlabel('sepal length')
plt.ylabel('sepal width')
plt.title('Line graph')
plt.show();

#plotting salaries of python and other developers vs their age
import numpy as np
import pandas as pd
age =[25, 30, 35, 40, 45, 50, 55, 60]
py = [4000, 4500, 2000, 5500, 5500, 6500, 7000, 8000]
others = [2000, 2450, 3500, 3000, 5000, 3500, 4000, 3000]
median = 4500
plt.fill_between(age, py, median,alpha = 0.25)
plt.fill_between(age, others, median,alpha = 0.25)
plt.rcdefaults()   # to undo hand-drawn graphs
plt.plot(age, py, color = 'red')
plt.plot(age, others, color = 'green')
plt.xlabel("AGE")
plt.ylabel("SALARY")
plt.legend(['Python', 'Other Developers'])
plt.show()

# BAR CHARTS
#plotting salaries of python and other developers vs their age, # it gives stacked mcolums if done in below mentioned way
import numpy as np
import pandas as pd
age =[25, 30, 35, 40, 45, 50, 55, 60]
py = [4000, 4500, 2000, 5500, 5500, 6500, 7000, 8000]
others = [2000, 2450, 3500, 3000, 5000, 3500, 4000, 3000]
median = 4500
plt.bar(age, py, color = 'red')
plt.bar(age, others, color = 'green')
plt.xlabel("AGE")
plt.ylabel("SALARY")
plt.legend(['Python', 'Other Developers'])
plt.show()

# BAR CHARTS
#plotting salaries of python and other developers vs their age, 
# to get different colums for python and other developers side by side
import numpy as np
import pandas as pd
age =[25, 30, 35, 40, 45, 50, 55, 60]
py = [4000, 4500, 2000, 5500, 5500, 6500, 7000, 8000]
others = [2000, 2450, 3500, 3000, 5000, 3500, 4000, 3000]
x_indexes = np.arange(len(age)) # creates indexes for x-label values
width = 0.25
plt.bar(x_indexes+width, py, color = 'orange', width = width, alpha = 0.6)  #alpha soothes the colors down
plt.bar(x_indexes, others, color = 'grey', width = width, alpha = 0.6)
plt.xlabel("AGE")
plt.ylabel("SALARY")
plt.legend(['Python', 'Other Developers']) 
plt.xticks(ticks= x_indexes, labels = age)  # to get proper x-label vlues, and not indexes    
plt.show()
# put values of bars

#Plot pie chart
age =(25, 30, 35, 40, 45, 50, 55, 60)
#age =[25, 30, 35, 40, 45, 50, 55, 60], this gerates a warning of using an array instead of list
explode = [0.1,0,0,0,0,0,0,0] # put values of all the pieces, 
# and the ones that need to be exploded gets some value which is for eg 0.1 of the radius
label = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']
#colors for nice visualization
plt.pie((age), wedgeprops = {'edgecolor' : 'grey'}, autopct = '%1.1f%%', shadow = True, explode = explode, labels = label, colors=colors, startangle=90)
plt.rcParams['font.size'] = 10.0  #to change label size
plt.rcdefaults()
plt.tight_layout()
plt.show()

#draw donut
age =(25, 30, 35, 40, 45, 50, 55, 60)
explode = [0.1,0,0,0,0,0,0,0]
label = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']
fig1, ax1 = plt.subplots()
plt.pie((age), wedgeprops = {'edgecolor' : 'grey'}, autopct = '%1.1f%%', pctdistance = 0.85, explode = explode, labels = label, colors=colors, startangle=90)
plt.rcParams['font.size'] = 2.0  #to change label size
#pctdistance = 0.85 will put percentages in the middle of the two circles
centre_circle = plt.Circle((0,0),0.70,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
ax1.axis('equal')
plt.xkcd()
plt.show()

# let label be language known, and we have other information on male and female
label = ['Python', 'C', 'Java', 'SQL']
Wage =(25, 30, 35, 40)
explode = [0, 0, 0, 0.1]
explode1 = [0,0, 0, 0 , 0, 0,0.1, 0.1] #no. of explode should match on the data for which it is used
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']
gender = ['Man','Woman','Man','Woman','Man','Woman','Man','Woman']
sizes_gender = [10,15, 10,20, 15,20, 20, 20]
colors_gender = ['#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6', '#c2c2f0','#ffb3e6']
fig1, ax1 = plt.subplots()
# for outer circle
plt.pie(Wage, wedgeprops = {'edgecolor' : 'grey'}, labels = label, pctdistance = 0.85, colors=colors, startangle=90, explode=explode)
# for inner circle
plt.pie(sizes_gender, colors = colors_gender, radius=0.75,startangle=90, explode = explode1)
centre_circle = plt.Circle((0,0),0.5, fc='white',linewidth=0)
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
ax1.axis('equal')
plt.rcdefaults()
plt.show()